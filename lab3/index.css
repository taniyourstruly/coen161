/**
    Global-ish styles that'll help get some of the spacing correct. 
*/

main {
    display: flex;
    justify-content: space-between;

    /** 
        I want this to always be the only thing seen in a window
        so this is a neat trick. 
    */
    width: 100vw;
    height: 100vh;
    /** 
        TASK 1A: What does the overflow property do? What happens when
        you set it to auto vs. hidden? 

        The overflow property controls what happens to content when it is too big to fit into a block. 
        When it is set to auto, the overflow is clipped and a scroll bar is added only if necessary. 
        When it is set to hidden, the overflow is clipped and any extra content is invisible.
    */
    overflow: hidden;
}

button {
    cursor: pointer;
    border: none;
    /** 
        This is a transition frunction I really liked from 
        https://codepen.io/sdthornton/pen/wBZdXq . I'm not too heavy into the math
        of animation functions so this serves that purpose. 
    */
    transition: all 0.3s cubic-bezier(.25,.8,.25,1);
}

button:hover {
    box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
}

main > section {
    display: flex;
    justify-content: center;
    align-items: center;

    /* 
        Use 48% so that neither section overflows. We could also use flex-basis
        but i thought width: 48% made this property more explicit since flex-basis
        will use this anyways
    */
    width: 48%;
    height: 100%;
}

.stack  {
    display: flex;
    flex-flow: column;

    /* 
        This width will be 30% of the parent section's width. I know that 60vh
        or 60% of the viewport height will leave plenty of space on the top and
        bottom. 
    */
    height: 60vh;
    width: 30%;

    margin-left: 1rem;
    margin-right: 1rem;
}

.stack > button{
    /** 
        TASK 1B: What does the order property do for a flex-item?

        Because flex items are displayed in the same order as in the html document, 
        the order property can reorder the items. The -1 here makes the button become 
        the first button of the column.
    */
    order: -1;
    
    background-color: #eee;
    
    text-align: center;
    font-size: 2rem;
    
    width: 100%;

    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    
}

.grid {
    display: flex;
    flex-direction: column;   
}

.grid .row button {
    background-color: #eee;

    width: 20vh;
    height: 20vh;

    margin: 1rem 0.5rem;
}

/** 
    TASK 1C
 */
.stack-action {
    display: flex;
    justify-content: center;
    align-items: center;

    width: 100%;
    height: 3vh;

    font-size: 1rem;
}